package com.arcsoft.sdk_demo.utils.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.arcsoft.sdk_demo.utils.bean.IsCallInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IS_CALL_INFO".
*/
public class IsCallInfoDao extends AbstractDao<IsCallInfo, Long> {

    public static final String TABLENAME = "IS_CALL_INFO";

    /**
     * Properties of entity IsCallInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Crime_id = new Property(1, String.class, "crime_id", false, "CRIME_ID");
        public final static Property Crime_name = new Property(2, String.class, "crime_name", false, "CRIME_NAME");
        public final static Property Crime_jianqu = new Property(3, String.class, "crime_jianqu", false, "CRIME_JIANQU");
        public final static Property Crime_xb = new Property(4, String.class, "crime_xb", false, "CRIME_XB");
        public final static Property Iscall = new Property(5, boolean.class, "iscall", false, "ISCALL");
        public final static Property Callphoto_time = new Property(6, String.class, "callphoto_time", false, "CALLPHOTO_TIME");
        public final static Property Crime_photo = new Property(7, String.class, "crime_photo", false, "CRIME_PHOTO");
    }


    public IsCallInfoDao(DaoConfig config) {
        super(config);
    }
    
    public IsCallInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IS_CALL_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CRIME_ID\" TEXT," + // 1: crime_id
                "\"CRIME_NAME\" TEXT," + // 2: crime_name
                "\"CRIME_JIANQU\" TEXT," + // 3: crime_jianqu
                "\"CRIME_XB\" TEXT," + // 4: crime_xb
                "\"ISCALL\" INTEGER NOT NULL ," + // 5: iscall
                "\"CALLPHOTO_TIME\" TEXT," + // 6: callphoto_time
                "\"CRIME_PHOTO\" TEXT);"); // 7: crime_photo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IS_CALL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IsCallInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String crime_id = entity.getCrime_id();
        if (crime_id != null) {
            stmt.bindString(2, crime_id);
        }
 
        String crime_name = entity.getCrime_name();
        if (crime_name != null) {
            stmt.bindString(3, crime_name);
        }
 
        String crime_jianqu = entity.getCrime_jianqu();
        if (crime_jianqu != null) {
            stmt.bindString(4, crime_jianqu);
        }
 
        String crime_xb = entity.getCrime_xb();
        if (crime_xb != null) {
            stmt.bindString(5, crime_xb);
        }
        stmt.bindLong(6, entity.getIscall() ? 1L: 0L);
 
        String callphoto_time = entity.getCallphoto_time();
        if (callphoto_time != null) {
            stmt.bindString(7, callphoto_time);
        }
 
        String crime_photo = entity.getCrime_photo();
        if (crime_photo != null) {
            stmt.bindString(8, crime_photo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IsCallInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String crime_id = entity.getCrime_id();
        if (crime_id != null) {
            stmt.bindString(2, crime_id);
        }
 
        String crime_name = entity.getCrime_name();
        if (crime_name != null) {
            stmt.bindString(3, crime_name);
        }
 
        String crime_jianqu = entity.getCrime_jianqu();
        if (crime_jianqu != null) {
            stmt.bindString(4, crime_jianqu);
        }
 
        String crime_xb = entity.getCrime_xb();
        if (crime_xb != null) {
            stmt.bindString(5, crime_xb);
        }
        stmt.bindLong(6, entity.getIscall() ? 1L: 0L);
 
        String callphoto_time = entity.getCallphoto_time();
        if (callphoto_time != null) {
            stmt.bindString(7, callphoto_time);
        }
 
        String crime_photo = entity.getCrime_photo();
        if (crime_photo != null) {
            stmt.bindString(8, crime_photo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IsCallInfo readEntity(Cursor cursor, int offset) {
        IsCallInfo entity = new IsCallInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // crime_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // crime_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // crime_jianqu
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // crime_xb
            cursor.getShort(offset + 5) != 0, // iscall
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // callphoto_time
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // crime_photo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IsCallInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCrime_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCrime_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCrime_jianqu(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCrime_xb(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIscall(cursor.getShort(offset + 5) != 0);
        entity.setCallphoto_time(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCrime_photo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IsCallInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IsCallInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IsCallInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
